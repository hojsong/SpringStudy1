package GS.Try.user;

import GS.Try.oauth42.Oauth2Service;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jws;
import io.jsonwebtoken.Jwts;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.ui.Model;

import javax.crypto.spec.SecretKeySpec;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.security.Key;
import java.util.*;

@Service
public class UserService {

    private final Oauth2Service oauth2Service;
    private final UserRepository userRepository;

    @Value("${secret-key}")
    private String sek;
    @Value("${api-url}")
    private String url;
    @Value("${client-id}")
    private String clientId;
    @Value("${client-secret}")
    private String clientSecret;
    @Value("${redirect-uri}")
    private String reurl;

    private String AccesToken;
    private int activateEvPoint;
    private List<String> userIdList;
    private Key key;
    @Autowired
    public UserService(UserRepository userRepository, Oauth2Service oauth2Service){
        this.userRepository = userRepository;
        this.oauth2Service = oauth2Service;
    }

    public String getUserAllDataByAdmin(HttpServletRequest request, Model model) throws IOException, InterruptedException {
        String Token = null;
        Cookie[] cookies = request.getCookies();

        if (cookies != null){
            for (Cookie cookie : cookies) {
                if (cookie.getName().equals("token")) {
                    Token = cookie.getValue();
                }
            }
        }
        System.out.println("Token = " + Token);
        if (Token.isEmpty()) {
            model.addAttribute("message", "Failed to retrieve token information.");
            return "Error";
        }

        Jws<Claims> jws = Jwts.parserBuilder().setSigningKey(this.key).build().parseClaimsJws(Token);
        System.out.println(jws.getBody());

//        getAllUsersData();
        model.addAttribute("message", "Data All Search Complete");
        return "Complete";
    }

    public void getAllCampus() throws IOException {
        String requsturi = "/v2/campus?page=";
        int idx = 1;
        while (true) {
            String campusData = getJsonData(this.AccesToken, requsturi + idx);
            if (campusData.isEmpty() || campusData.equals("[]")) {
                break;
            }
            System.out.println("page" + idx + " : " + campusData);
            idx++;
        }
    }


    // 피시너 데이터까지 다긁어온다.
    public List<String> getCampusUserDataAll(int campus_id) throws IOException {
        String requsturi = "/v2/campus/" + campus_id + "/users?page=";
        int pageNum = 1;
        String myCampus = getJsonData(this.AccesToken, requsturi+pageNum);
        pageNum++;
        List<String> logins = extractValuesToList(myCampus,"id");
        while (true){
            myCampus = getJsonData(this.AccesToken, requsturi+pageNum);
            if (myCampus == null || myCampus.isEmpty())
                break;
            List<String> logs = extractValuesToList(myCampus,"id");
            if (logs.isEmpty())
                break;
            System.out.println("pageNum = " + pageNum);
            pageNum++;
            logins.addAll(logs);
        }
        if(myCampus.equals("[]")) {
            System.out.println("myCampus = NULL");
        }
        else
            System.out.println("myCampus = " + myCampus);
        System.out.println("logins.size = " + logins.size());
        return logins;
    }

    public void findMeAndSave(HttpServletRequest request, HttpServletResponse response, String me) throws JsonProcessingException {
        ObjectMapper mapper = new ObjectMapper();
        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
        User user = mapper.readValue(me, User.class);
        JsonNode rootNode = mapper.readTree(me);

        if (rootNode.toString().contains("\"grade\":\"Learner\""))
            user.setGrade("Learner");
        else if (rootNode.toString().contains("\"grade\":\"Member\""))
            user.setGrade("Member");
        else
            user.setGrade("???");

        Optional<User> originUser = userRepository.findById(user.getId());
        if (originUser.isEmpty() || originUser == null) {
            System.out.println("No Search USer");
            userRepository.save(user);
        }
        else {
            if (originUser.get().getId().equals(user.getId())) {
                if (!originUser.get().getLogin().equals(user.getLogin()))
                    originUser.get().setLogin(user.getLogin());
                if (!originUser.get().getGrade().equals(user.getGrade()))
                    originUser.get().setGrade(user.getGrade());
            } else {
                userRepository.save(user);
            }
        }

        byte[] byteKey = this.sek.getBytes(StandardCharsets.UTF_8);
        // SecretKeySpec으로 키 생성
        this.key = new SecretKeySpec(byteKey, "HmacSHA256");
        System.out.println("key = " + key);

        String jws = Jwts.builder()
                .setSubject("Joe")  // 주제 설정
                .setExpiration(new Date(System.currentTimeMillis() + 3600000))  // 만료 시간 설정
                .claim("id", user.getId())
                .claim("name", user.getLogin())
                .claim("grade", user.getGrade())
                .signWith(key)  // 비밀 키로 서명
                .compact();  // JWT 문자열 생성

        System.out.println("JWT: " + jws);

        Cookie[] cookies = request.getCookies();

        if (cookies != null){
            for (Cookie cookie : cookies) {
                if (cookie.getName().equals("token")) {
                    cookie.setMaxAge(0);
                }
            }
        }

        Cookie cookie = new Cookie("token", jws);
        // 쿠키 설정
        cookie.setMaxAge(60 * 10); // 쿠키 유효 시간을 1시간으로 설정
        cookie.setHttpOnly(true);  // JavaScript를 통한 쿠키 접근 차단
        cookie.setPath("/");
        response.addCookie(cookie);
    }


    public String getAccessToken(String code) {
        String accessToken = oauth2Service.getAccessTokenWithCode(code, clientId, clientSecret, reurl);
        System.out.println("accessToken = " + accessToken);
        // 액세스 토큰을 이용하여 'v2/me'에 GET 요청을 보냅니다.
        String me = oauth2Service.getMe(accessToken);
        System.out.println("me = " + me);
        this.AccesToken = accessToken;
        return me;
    }

    public void getAllUsersData() throws IOException, InterruptedException {
        String requsturi = "/v2/users/";
        activateEvPoint = 0;

//        userIdList = getCoalitionUsersDataPutCampus("42Seoul");
//        String data ="163212, 157956, 158013, 158015, 158022, 163114, 158149, 157933, 157964, 163012, 158007, 157986, 163010, 158085, 158071, 158011, 163221, 163268, 163060, 158088, 163124, 157997, 163078, 157982, 158161, 157980, 163240, 158102, 158155, 157946, 163084, 163031, 163259, 158081, 158070, 163105, 163055, 163228, 163197, 157907, 158008, 163014, 163061, 158074, 158110, 163027, 157977, 163229, 158024, 163153, 62987, 141297, 145054, 144935, 145083, 141478, 141451, 145023, 141380, 141453, 144904, 144899, 145154, 144909, 145177, 141400, 141361, 145112, 141511, 144954, 145094, 141449, 144962, 141320, 145191, 144896, 144985, 141448, 145168, 141373, 145134, 141467, 145101, 141531, 141410, 145151, 141360, 145020, 145169, 141388, 145104, 145049, 145086, 144942, 144927, 141462, 141404, 145005, 141507, 141344, 141496, 144894, 144940, 141487, 144982, 132658, 131788, 135518, 135687, 131598, 131768, 131574, 135685, 135665, 131738, 131734, 131705, 135697, 131818, 135466, 135641, 135583, 135391, 131700, 135497, 131570, 131650, 131781, 135619, 135648, 131800, 135443, 135389, 131712, 131646, 131690, 135525, 135705, 135576, 131786, 131722, 135628, 131542, 131568, 135783, 135523, 135534, 135557, 131841, 131527, 131694, 131784, 131801, 135521, 131615, 135431, 131648, 135489, 135658, 131824, 131611, 131590, 112229, 110831, 110806, 112029, 110798, 110834, 110825, 110881, 112196, 110820, 110815, 110933, 110830, 110738, 110839, 112092, 112204, 110816, 110696, 112271, 112174, 110763, 112161, 110695, 112178, 110775, 112093, 110663, 112261, 110814, 110950, 112152, 110730, 112200, 112062, 112002, 110829, 110857, 112285, 110918, 110722, 110864, 112058, 110941, 110681, 112139, 110646, 112090, 110836, 112265, 112298, 112190, 110898, 110661, 110645, 112065, 112108, 112105, 107089, 107121, 104036, 107096, 107136, 103905, 104048, 104103, 104051, 107079, 107188, 107122, 104035, 104007, 106938, 104059, 104017, 104008, 104061, 103897, 104131, 103910, 104094, 103993, 106877, 106913, 104004, 106845, 107117, 107047, 106813, 107035, 103934, 104001, 104075, 103936, 106947, 107055, 103955, 106941, 104047, 106932, 103902, 103937, 106825, 106843, 103947, 107068, 107061, 106806, 106945, 107094, 103952, 103956, 107006, 104018, 107043, 103958, 104025, 106879, 107187, 103906, 106803, 106921, 103932, 106933, 106835, 104100, 107056, 104029, 104142, 106907, 103908, 107024, 106952, 106944, 107001, 103939, 104155, 103968, 107010, 98324, 99968, 99930, 98292, 98341, 99982, 98333, 99750, 98306, 98045, 99999, 99761, 98327, 98112, 98312, 99937, 99835, 99793, 98103, 98002, 99907, 98361, 98354, 98381, 98106, 99903, 99738, 98035, 99947, 99909, 99732, 99790, 98346, 98350, 98028, 98005, 98299, 98278, 98309, 98301, 99900, 98100, 98260, 98358, 98101, 99744, 99931, 99798, 98379, 99722, 99776, 98288, 99806, 97977, 98105, 99766, 98007, 99961, 99746, 99777, 97996, 99815, 98255, 99898, 98095, 99946, 99972, 98031, 98323, 98038, 97985, 98267, 98104, 99775, 99954, 98088, 99858, 86891, 86909, 85137, 85251, 87012, 86974, 86973, 86991, 86899, 85185, 85184, 85294, 86794, 86963, 86865, 85138, 87053, 87046, 85204, 86822, 85144, 86983, 86893, 86890, 86843, 87070, 86804, 85068, 85265, 87032, 85246, 85349, 85177, 87030, 87059, 87069, 85164, 86895, 85332, 85162, 85228, 86798, 87066, 86994, 86872, 85237, 85105, 85328, 86924, 86852, 86808, 85120, 86961, 85135, 86806, 85259, 85093, 86886, 86811, 86859, 86840, 86803, 85361, 86805, 85250, 82675, 68825, 75359, 75653, 79642, 79546, 81783, 81322, 81409, 79651, 80404, 81820, 81384, 80381, 81765, 79615, 79695, 80460, 81302, 81760, 80423, 81363, 79696, 80442, 79584, 79589, 81405, 81402, 81378, 81713, 81448, 81758, 81780, 81689, 81818, 79681, 81367, 79597, 79636, 81399, 79690, 81734, 81744, 81822, 81426, 80449, 81369, 81403, 81728, 81332, 81768, 79662, 79598, 81819, 81810, 81360, 81335, 81410, 79679, 81324, 81749, 79678, 81732, 79586, 81385, 79641, 79611, 81784, 81715, 81339, 80390, 81792, 79578, 81370, 79580, 81416, 81731, 79672, 81304, 74913, 74955, 74885, 74894, 74964, 74852, 75022, 75045, 75030, 74915, 74931, 75020, 74836, 75016, 75025, 74897, 75085, 74908, 75031, 75098, 75036, 75072, 74837, 75068, 74841, 74891, 74890, 74906, 74866, 74960, 74864, 74921, 75069, 74919, 74933, 75041, 76245, 76187, 76110, 76348, 76313, 76226, 76165, 76212, 76219, 76305, 76343, 76357, 76312, 76227, 76185, 76144, 76237, 76323, 76374, 76168, 76129, 76321, 76145, 76376, 76157, 76118, 76178, 76199, 76204, 74847, 74902, 74927, 74912, 75082, 75099, 74888, 75111, 78401, 72499, 72416, 72439, 72494, 72455, 72466, 72492, 72418, 72474, 72458, 72483, 74122, 74368, 69085, 68887, 69067, 69141, 68832, 69009, 68964, 68978, 68857, 69188, 69089, 68888, 68947, 69145, 68982, 69142, 68865, 69147, 68902, 69170, 68868, 69117, 69044, 68898, 69032, 68975, 68909, 68912, 68924, 68854, 68969, 69076, 69121, 69031, 69025, 69074, 69128, 67026, 69136, 68932, 69094, 69056, 68871, 68939, 69196, 68856, 68946, 69138, 69109, 69179, 69065, 69115, 68961, 68904, 84333, 158192, 158191, 158019, 163099, 158183, 157942, 163236, 163037, 163209, 163065, 158194, 157994, 163074, 157973, 163135, 158147, 157958, 163148, 163237, 163156, 158012, 157945, 163080, 157941, 158067, 157902, 163225, 163214, 157978, 157914, 158026, 163052, 163281, 163006, 163108, 163175, 163122, 158065, 163227, 163011, 163211, 157990, 158042, 158182, 141441, 141300, 144943, 144895, 145011, 145110, 145192, 141481, 145077, 145174, 145127, 145078, 141422, 141429, 145131, 145008, 145026, 141516, 144995, 141498, 145051, 141402, 145130, 144956, 141312, 141374, 141499, 141358, 141423, 141409, 141331, 141492, 145120, 141497, 141399, 144905, 145144, 145064, 141350, 144948, 141336, 145027, 141582, 141343, 144933, 145066, 144988, 144936, 141486, 145024, 141382, 141544, 141415, 144972, 145158, 141384, 144918, 141340, 141567, 141447, 141541, 141444, 141529, 145141, 145153, 144902, 145150, 145084, 141708, 135416, 135565, 131549, 131604, 135604, 131808, 135635, 135761, 131578, 135668, 131755, 135676, 131603, 131820, 135636, 135426, 135434, 131750, 131602, 135751, 135546, 131797, 131669, 131559, 131635, 135725, 131647, 135530, 135753, 135422, 131564, 135719, 131789, 131571, 131541, 135543, 135611, 135555, 131796, 135447, 131757, 131546, 131631, 131723, 131793, 131605, 135566, 135438, 135594, 135778, 131681, 135406, 131666, 135468, 131733, 135711, 131699, 135436, 131747, 135540, 135586, 110735, 110709, 110668, 110659, 112236, 112260, 110901, 110847, 110713, 110655, 112185, 110700, 110890, 110916, 110637, 112156, 112144, 110648, 110715, 110931, 110821, 110852, 112183, 112243, 110813, 110664, 112019, 112241, 112275, 110651, 110701, 110706, 112114, 110650, 110766, 110915, 110936, 112162, 110726, 110639, 112148, 112128, 112024, 110752, 110879, 112202, 110673, 110760, 112238, 110797, 110687, 110640, 112245, 110792, 112052, 110800, 110684, 112188, 112069, 110837, 110697, 110733, 112270, 112084, 104109, 103929, 103976, 104046, 107009, 103894, 104125, 103922, 103930, 103972, 103996, 103933, 104115, 103892, 103975, 106931, 107118, 106893, 107067, 106993, 104060, 104043, 106982, 103979, 106810, 106964, 106929, 107168, 106975, 107154, 103994, 103926, 106953, 107077, 104011, 103913, 103988, 106961, 104126, 103927, 103992, 104085, 104020, 104129, 107052, 104124, 106872, 106998, 103970, 107072, 107111, 107002, 106920, 106934, 104052, 106871, 107015, 107112, 103891, 103918, 104108, 104044, 103931, 103966, 103499, 103787, 90424, 100011, 98081, 98322, 97976, 98271, 98339, 99821, 97979, 98320, 98286, 98287, 99993, 99953, 99986, 98272, 98019, 99819, 99971, 99782, 99973, 99753, 99857, 99985, 98373, 99965, 99788, 98318, 99929, 97997, 99787, 99762, 98253, 99748, 98371, 99920, 99749, 99856, 100036, 99997, 97982, 98001, 99829, 98316, 99828, 99737, 98094, 98351, 98017, 99757, 98073, 99917, 98293, 98082, 99921, 100017, 98262, 99913, 99827, 98052, 99754, 100013, 85134, 85260, 85155, 86933, 86962, 85235, 85122, 85295, 86998, 85340, 87011, 86814, 86861, 85064, 85066, 85124, 86902, 86874, 86793, 86965, 85292, 86827, 85245, 85205, 85085, 85326, 85099, 85158, 86853, 86883, 86836, 86966, 87082, 87018, 85314, 85207, 86882, 86812, 85281, 86870, 86905, 85319, 85116, 87024, 85301, 86838, 85107, 87047, 85125, 85087, 85252, 86879, 86927, 86790, 85343, 86997, 85060, 86800, 85178, 86880, 79093, 80443, 80398, 81347, 81790, 79606, 81692, 79706, 80463, 79676, 80400, 79585, 79698, 79632, 81411, 81421, 81311, 81709, 81752, 80438, 80402, 80418, 79620, 79601, 79638, 80392, 80429, 79633, 81371, 80426, 80466, 80370, 80379, 79592, 81717, 79653, 80378, 80425, 81344, 81365, 81725, 81702, 81712, 80361, 79614, 80478, 81317, 80366, 81357, 81428, 80384, 81751, 81750, 79622, 81319, 79669, 80421, 79587, 79625, 81688, 80409, 81691, 81315, 80369, 81718, 81786, 81762, 80396, 80376, 81394, 80397, 79658, 80365, 80360, 81372, 79664, 81338, 79624, 81169, 68829, 75665, 76320, 75055, 75087, 75107, 75067, 74840, 74867, 74941, 75039, 74956, 74942, 75093, 75032, 75073, 74904, 75089, 75097, 75015, 74895, 74943, 74858, 75091, 75044, 75017, 76147, 76174, 76342, 76300, 76244, 76121, 76252, 76132, 76367, 76167, 76189, 76124, 76341, 76234, 76209, 76117, 76345, 76326, 76316, 76331, 76135, 76149, 76308, 76314, 76365, 76330, 76274, 76328, 76142, 76133, 76163, 76188, 76317, 76164, 76275, 76156, 76378, 76134, 76232, 74868, 75090, 74903, 75105, 74850, 75063, 74862, 74881, 75100, 74209, 72471, 72457, 72468, 72431, 72429, 72438, 72475, 72440, 72433, 72459, 72461, 72480, 72495, 68582, 69168, 69019, 69041, 67473, 68916, 69189, 68905, 69099, 68860, 69194, 69090, 68707, 68984, 68977, 68874, 69047, 69050, 68996, 68926, 68859, 69030, 69033, 68882, 68927, 68851, 69158, 69066, 69097, 68997, 69144, 68897, 68850, 69023, 69105, 68936, 69152, 68855, 69088, 68866, 69186, 68963, 69015, 69087, 69001, 69131, 69038, 68945, 68974, 68968, 69060, 68966, 68872, 69004, 69123, 133629, 157950, 158064, 158178, 158086, 158031, 158017, 163110, 163089, 158111, 163043, 163204, 163250, 163185, 163235, 158179, 157988, 157970, 158043, 157923, 157908, 163145, 163106, 157971, 157976, 163203, 158138, 157960, 163231, 157984, 158122, 163036, 157903, 163266, 163029, 157915, 158035, 163051, 157932, 157965, 163154, 157909, 163091, 163107, 163115, 157900, 158112, 158196, 145166, 141428, 145055, 141482, 141354, 141594, 144971, 145032, 141543, 141397, 145102, 144994, 141341, 145087, 141560, 141353, 141315, 145123, 141461, 145069, 141475, 141337, 141421, 141439, 145161, 145046, 141536, 144917, 141356, 141381, 145041, 141372, 141411, 145117, 145082, 145065, 141408, 144973, 145042, 144908, 141389, 141538, 141314, 141466, 145018, 144912, 141357, 141505, 145058, 145044, 131716, 131852, 135463, 131638, 131715, 131802, 135638, 131776, 131795, 135470, 131597, 135726, 135450, 131843, 131742, 131834, 131587, 131689, 135461, 135501, 135633, 131561, 131804, 131548, 131618, 135500, 131751, 131531, 135605, 131664, 131693, 135485, 135782, 135781, 131534, 135607, 131677, 131544, 131714, 135667, 135585, 135410, 131623, 135591, 135724, 135451, 131535, 135758, 135732, 131696, 131553, 131599, 135640, 131606, 131582, 131554, 135662, 131579, 135720, 131752, 135686, 108454, 117163, 112081, 110835, 110689, 112078, 112203, 110840, 112153, 112055, 110747, 110656, 112258, 112145, 112149, 112079, 110694, 112082, 110793, 112098, 112010, 110708, 110710, 112194, 112213, 110677, 110641, 112226, 112235, 110803, 112252, 112018, 112210, 112151, 110802, 110698, 110902, 110904, 112119, 112116, 110870, 110883, 110679, 110759, 110729, 110783, 112133, 112182, 112008, 112005, 110811, 110717, 112155, 106946, 107085, 106883, 103981, 104055, 104028, 104107, 103971, 106930, 104114, 104122, 103989, 103919, 103899, 107020, 103977, 107008, 104092, 104045, 104095, 106980, 104089, 103940, 107090, 104049, 107166, 103995, 104013, 107179, 103953, 104102, 107139, 107126, 107018, 103943, 106834, 103923, 103890, 103980, 104090, 103907, 103920, 107107, 103921, 106890, 106844, 107181, 106868, 104159, 107016, 104144, 106897, 106823, 107075, 107093, 103987, 103974, 106812, 106939, 106906, 107116, 106839, 106896, 107029, 98018, 98344, 98289, 99918, 99951, 99724, 97993, 99720, 98085, 99932, 98022, 98034, 98066, 99786, 98296, 98284, 98363, 98380, 99841, 98340, 99851, 98014, 98051, 98362, 99976, 99830, 98377, 97995, 99734, 98257, 99770, 99831, 98387, 99842, 99949, 98109, 98334, 99963, 99936, 98330, 99760, 99922, 98349, 99979, 99833, 100020, 98090, 98266, 99805, 98319, 99723, 98072, 98285, 99727, 98023, 98029, 98006, 99978, 99912, 99994, 98037, 98024, 99914, 99992, 99958, 98331, 99910, 98302, 99844, 98003, 98069, 99718, 85243, 85322, 86979, 86810, 85156, 85187, 85140, 87001, 86881, 85223, 86802, 85351, 85077, 86971, 86946, 85355, 85302, 85305, 85242, 86906, 85257, 85240, 85339, 87000, 87083, 85312, 85289, 85109, 85174, 86792, 86959, 85219, 85308, 87074, 85304, 85315, 85190, 85142, 86936, 85173, 86956, 86981, 86953, 86809, 86815, 87027, 85084, 86875, 85216, 86844, 85131, 85255, 86830, 86952, 85062, 86818, 86990, 85238, 85073, 86829, 87025, 85282, 85111, 86846, 85274, 85108, 86898, 86841, 86949, 85296, 82562, 78027, 75356, 81814, 81351, 79665, 80406, 79660, 80471, 81436, 81393, 81346, 80436, 81703, 81309, 79602, 79604, 81823, 79599, 81313, 80432, 81373, 80454, 80459, 81794, 81397, 81714, 81427, 81368, 79637, 81693, 81759, 81334, 81742, 79616, 81388, 79581, 81325, 81420, 80476, 81753, 79661, 81356, 80446, 81308, 81445, 80440, 81443, 79627, 81737, 79644, 79583, 81755, 81806, 81740, 79631, 80382, 80362, 81307, 81376, 79623, 80452, 81746, 80462, 81815, 80367, 80458, 81748, 79593, 79654, 81381, 81380, 81386, 81303, 81706, 81770, 81719, 81720, 81437, 76309, 76229, 78719, 74842, 75113, 75018, 75049, 74946, 74870, 74863, 75058, 74951, 74922, 74872, 74876, 74928, 74882, 74879, 74860, 74916, 74934, 74892, 75062, 74900, 74845, 76369, 76197, 76159, 76182, 76296, 76207, 76282, 76304, 76181, 76205, 76235, 76347, 76170, 76233, 76337, 76201, 76206, 76113, 76176, 76281, 76220, 76322, 76139, 76151, 76173, 76318, 76177, 76127, 76335, 76166, 76372, 76385, 76183, 76306, 76175, 76295, 76138, 75095, 75064, 75046, 74966, 74911, 75081, 74914, 74954, 75043, 74873, 75078, 72479, 72497, 72477, 72502, 72449, 72482, 72467, 72427, 72470, 72484, 72415, 72436, 70836, 74119, 69042, 69037, 69150, 69116, 69176, 69003, 69192, 69157, 69063, 68940, 69078, 69119, 68894, 68995, 69096, 69016, 74116, 69054, 69153, 69048, 69164, 68890, 69091, 69059, 68895, 68951, 69111, 67474, 68929, 69046, 69069, 68988, 69053, 69114, 68965, 69137, 68950, 67341, 69036, 68879, 68915, 68907, 68972, 69184, 69073, 69187, 68892, 69000, 69084, 68976, 69146, 69195, 68873, 69140, 158089, 158114, 163142, 163138, 163136, 163183, 163180, 163053, 163098, 158023, 158188, 158036, 163248, 163162, 158006, 163167, 157912, 157940, 158190, 163045, 163109, 157961, 163263, 163094, 163095, 163082, 158169, 163032, 163026, 163218, 157944, 157952, 158005, 157949, 163004, 163129, 158014, 157992, 163223, 163028, 163035, 157981, 163163, 163056, 163155, 163200, 158010, 163069, 163147, 163086, 157991, 163146, 158066, 163019, 163119, 157954, 157901, 163239, 163199, 163111, 158025, 86144, 148890, 143584, 145179, 141440, 141334, 144919, 141502, 141477, 141370, 141375, 145038, 145074, 141443, 145105, 145073, 144955, 145128, 141473, 141442, 141309, 145146, 141403, 141458, 141545, 144980, 141445, 141367, 141377, 145053, 141566, 131556, 131761, 135478, 131740, 135572, 131601, 131652, 135712, 135672, 131827, 135440, 135515, 135413, 131823, 135747, 135742, 135588, 131639, 135545, 135766, 135590, 135764, 131828, 135606, 131799, 135548, 135429, 131826, 135511, 135467, 135721, 131619, 135704, 135771, 131566, 135650, 135454, 135567, 135716, 135684, 131697, 131829, 131730, 135581, 131727, 131543, 135571, 135624, 135509, 135614, 135654, 135612, 131748, 131807, 135516, 135428, 135484, 135481, 131588, 135551, 131622, 135622, 131526, 135616, 131703, 131745, 131558, 131589, 131831, 131846, 135404, 131607, 110734, 112117, 110940, 110900, 110719, 112101, 112140, 112071, 112014, 110887, 112013, 110755, 110934, 110889, 110716, 110662, 110947, 110654, 110860, 110718, 110743, 110819, 110634, 112201, 112097, 110938, 110955, 110772, 110758, 112080, 112240, 112230, 110686, 110863, 112066, 110781, 110731, 112068, 110917, 110796, 110667, 110649, 110886, 112124, 112176, 112142, 112272, 112046, 112075, 110903, 110674, 112023, 112125, 112077, 112042, 110658, 112104, 110690, 110770, 110643, 110711, 112281, 110665, 110657, 110842, 110737, 112076, 110914, 112054, 110949, 112030, 110724, 110804, 110799, 110736, 110672, 112085, 111064, 103895, 107145, 104067, 106887, 106985, 107066, 104023, 104160, 106954, 107022, 106858, 106949, 107053, 107109, 106987, 103893, 104003, 104019, 107146, 103978, 107131, 104134, 106801, 106937, 106867, 104140, 103945, 106873, 107149, 106970, 107051, 107025, 106807, 107073, 106854, 107115, 104111, 103969, 107040, 103964, 103965, 99726, 98055, 99783, 99730, 99911, 97998, 99962, 98074, 98108, 99791, 98025, 99747, 98355, 100009, 100004, 98269, 99739, 98297, 98059, 99988, 100015, 98044, 98274, 99926, 98021, 98086, 99778, 99820, 98115, 98364, 99863, 99811, 99928, 100016, 99855, 99767, 97991, 99915, 98016, 98047, 98298, 99721, 99756, 99925, 99825, 99960, 99974, 99906, 99966, 99981, 99916, 99919, 99816, 99796, 98079, 98321, 98263, 97983, 99991, 98096, 100030, 98313, 98308, 99792, 98004, 98384, 99764, 99763, 97987, 99895, 98053, 99987, 99896, 98303, 98310, 99765, 98254, 99934, 98027, 98368, 100002, 97999, 98360, 99733, 98337, 98114, 99902, 98070, 98356, 98000, 85493, 85168, 87009, 86925, 85330, 85147, 86900, 87020, 85248, 85126, 85320, 85325, 85256, 85166, 85114, 85070, 85273, 85083, 87067, 85227, 86967, 85076, 85199, 85345, 85183, 85221, 87063, 86856, 87075, 85261, 86834, 85170, 86982, 86992, 85234, 85287, 86828, 86795, 85143, 87055, 85175, 85329, 86832, 86860, 86799, 86987, 85167, 85088, 86807, 85086, 85082, 85307, 87042, 87010, 86975, 87041, 80468, 81350, 81698, 79594, 79684, 81707, 80374, 81396, 80472, 80416, 81781, 81316, 80479, 79645, 81798, 79711, 79674, 79667, 79673, 81805, 79694, 79683, 81807, 81723, 81775, 81766, 79709, 79582, 80433, 79697, 79655, 80403, 81430, 81361, 79608, 79649, 79691, 80420, 80358, 79619, 79591, 81754, 81771, 81412, 80371, 81329, 81795, 81808, 81730, 81387, 79643, 81736, 79610, 79596, 81306, 81724, 81336, 81379, 81785, 81791, 81326, 79688, 81377, 79687, 79700, 79699, 79689, 80385, 81343, 81419, 81802, 80431, 80368, 79652, 81429, 80399, 74925, 75024, 75066, 74859, 75077, 74856, 74930, 75047, 74843, 75027, 74920, 75051, 74887, 74929, 74834, 74874, 74917, 74878, 74918, 74909, 74849, 75042, 75086, 74905, 74899, 74854, 75023, 74839, 75065, 75053, 75088, 75050, 74957, 76256, 76340, 74896, 76191, 76247, 76277, 76218, 76210, 76336, 76160, 76200, 76289, 76161, 76221, 76286, 76180, 76241, 76125, 76193, 76354, 76379, 76273, 76315, 76222, 76270, 76194, 76279, 76359, 76128, 76119, 76223, 76297, 76155, 76184, 76303, 76211, 76231, 76195, 74861, 76284, 76153, 75019, 75034, 74893, 75101, 75126, 79124, 75353, 72487, 72476, 72421, 72496, 72448, 72464, 72454, 72432, 72422, 72435, 74388, 69011, 68913, 68910, 68944, 69149, 69106, 68893, 68941, 68942, 69070, 69120, 68889, 69028, 69007, 69151, 68848, 69035, 69163, 69092, 69093, 69124, 68930, 69086, 69112, 69081, 69143, 68949, 69021, 68967, 68955, 68870, 69101, 68852, 74123, 68979, 69071, 69160, 69055, 68861, 68994, 69135, 69072, 69040, 68973, 69064, 66855, 69167, 69159, 68867, 72045, 68952, 69991, 68884, 68998, 67127";
//        userIdList = Arrays.asList(data.split(", "));
//        putCampusOfUsersData(requsturi, "42Seoul");

        //        userIdList = getCoalitionUsersDataPutCampus("42Gyeongsan");
        String data ="180848, 180844, 180841, 179865, 179864, 179863, 179862, 179861, 179860, 179859, 179858, 179857, 179856, 179855, 179854, 179853, 179852, 179851, 179850, 179849, 179848, 179847, 179846, 179845, 179844, 179843, 179842, 179841, 179840, 179839, 179838, 179837, 179836, 179835, 179834, 179833, 179832, 179831, 179830, 179829, 179828, 179827, 179826, 179825, 179824, 179823, 179822, 179821, 179820, 179819, 179818, 179817, 179816, 179815, 179814, 179813, 179812, 179811, 179810, 179809, 179808, 179807, 179806, 179805, 179804, 179803, 179802, 179801, 179800, 179799, 179798, 179797, 179796, 179795, 179794, 179793, 179792, 179791, 179790, 179789, 179788, 179787, 179786, 179785, 179784, 179783, 179782, 179781, 179780, 179779, 179778, 179777, 179776, 179775, 179774, 179773, 179772, 179771, 179770, 179769, 179768, 179767, 179766, 179765, 179764, 179763, 179762, 179761, 179760, 179759, 179758, 179757, 179756, 179755, 179754, 179753, 179752, 179751, 179750, 179749, 179748, 179747, 179746, 179745, 179744, 179743, 179742, 179741, 179740, 179739, 179738, 179737, 179736, 179735, 179734, 179733, 179732, 179731, 179730, 179729, 179728, 179727, 179726, 179725, 179724, 179723, 179722, 179721, 179720, 179719, 179718, 179717, 179716, 179715, 179714, 179713, 179712, 179711, 179710, 179709, 179708, 179707, 179706, 179705, 179704, 179703, 179702, 179701, 179700, 179699, 179698, 179697, 179696, 179695, 179694, 179693, 179692, 179691, 179690, 179689, 179688, 179687, 179686, 179685, 179684, 179683, 179682, 179681, 179680, 179679, 179678, 179677, 179676, 179675, 179674, 179673, 179672, 179671, 179670, 179669, 179668, 179667, 179666, 179665, 179664, 179663, 179662, 179661, 179660, 179659, 179658, 179657, 179656, 179655, 179654, 179653, 179652, 179651, 179650, 179649, 179648, 179647, 179646, 179645, 179644, 179643, 179642, 179641, 179640, 179639, 179638, 179637, 179636, 179635, 179634, 179633, 179632, 179631, 179630, 179629, 179628, 179627, 179626, 179625, 179624, 179623, 179622, 179621, 179620, 179619, 179618, 179617, 179616, 179615, 179614, 179613, 179612, 179611, 179610, 179609, 179608, 179607, 179606, 179605, 179604, 179603, 179503, 178691, 175135, 175101, 175100, 175099, 175098, 175097, 175096, 175095, 175094, 175093, 175092, 174196, 174195, 174194, 174193, 174192, 174191, 174190, 174189, 174188, 174187, 174186, 174185, 174184, 174183, 174182, 174181, 174180, 174179, 174178, 174177, 174176, 174175, 174174, 174173, 174172, 174171, 174170, 174169, 174168, 174167, 174166, 174165, 174164, 174163, 174162, 174161, 174160, 174159, 174158, 174157, 174156, 174155, 174154, 174153, 174152, 174151, 174150, 174149, 174148, 174147, 174146, 174145, 174144, 174143, 174142, 174141, 174140, 174139, 174138, 174137, 174136, 174135, 174134, 174133, 174132, 174131, 174130, 174129, 174128, 174127, 174126, 174125, 174124, 174123, 174122, 174121, 174120, 174119, 174118, 174117, 174116, 174115, 174114, 174113, 174112, 174111, 174110, 174109, 174108, 174107, 174106, 174105, 174104, 174103, 174102, 174101, 174100, 174099, 174098, 174097, 174096, 174095, 174094, 174093, 174092, 174091, 174090, 174089, 174088, 174087, 174086, 174085, 174084, 174083, 174082, 174081, 174080, 174079, 174078, 174077, 174076, 174075, 174074, 174073, 174072, 174071, 174017, 174015, 172509, 172508, 172506, 172505, 172504, 172503, 172502, 172501, 172500, 172499, 172498, 172497, 172496, 172490, 172489, 172487, 172485, 172484, 172483, 172482, 172480, 172479, 172478, 172477, 172476, 172427, 172426, 172425, 172424, 172421, 172420, 172419, 172418, 172417, 172416, 172415, 172414, 172413, 172412, 172411, 172410, 172409, 172408, 172407, 172406, 172405, 172404, 172403, 172402, 172401, 172400, 172399, 172398, 172397, 172396, 172395, 172394, 172393, 172392, 172391, 172390, 172389, 172388, 172387, 172386, 172385, 172384, 172383, 172382, 172381, 172380, 172379, 172378, 172377, 172376, 172375, 172374, 172373, 172372, 172371, 172370, 172369, 172368, 172367, 172366, 172365, 172364, 172363, 172362, 172361, 172360, 172359, 172358, 172357, 172356, 172355, 172354, 172353, 172352, 172351, 172350, 172349, 172348, 172347, 172346, 172345, 172344, 172343, 172342, 172341, 172340, 172339, 172338, 172337, 172336, 172335, 172334, 172333, 172332, 172331, 172330, 172329, 172327, 172326, 172325, 172324, 172323, 172322, 172321, 172320, 172319, 172318, 172317, 172316, 172315, 172314, 172313, 172312, 172311, 172310, 172309, 172308, 172307, 172306, 172305, 172304, 172303, 172300, 172291, 172278, 171847, 171431, 171430, 171427, 170268, 167614, 166798, 166797, 166796, 166795, 166794, 166793, 166792, 166791, 154632, 132039, 98539, 82562, 53022";
        userIdList = Arrays.asList(data.split(", "));
        putCampusOfUsersData(requsturi, "42Gyeongsan");

        System.out.println("activateEvPoint = " + activateEvPoint);
    }

    private void putCampusOfUsersData(String requsturi, String campus) throws JsonProcessingException {
        String data = null;
        data = getCampusidPutCampusString(campus);
        for (String idx : userIdList) {
            String userData = getJsonData(this.AccesToken, requsturi + idx);
            System.out.println("userData = " + userData);
            if(userData != null && !userData.isEmpty() && !userData.equals("[]")) {
                ObjectMapper mapper = new ObjectMapper();
                mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
                User user = mapper.readValue(userData, User.class);
                JsonNode rootNode = mapper.readTree(userData);

                if (rootNode.toString().contains("\"grade\":\"Learner\""))
                    user.setGrade("Learner");
                else if (rootNode.toString().contains("\"grade\":\"Member\""))
                    user.setGrade("Member");
                else
                    user.setGrade("???");
                user.setCampus_id(data);

                String login = user.getLogin();
                String grade = user.getGrade();
                int correction_point = user.getCorrection_point();

//                System.out.println(idx + " : " + login + " / " + grade + " / " + correction_point);
                if (user.getGrade().equals("Learner"))
                    activateEvPoint += user.getCorrection_point();
                else if (user.getGrade().equals("MEMBER") && user.getCorrection_point() < 0)
                    activateEvPoint -= user.getCorrection_point();
                userRepository.save(user);
            }
        }
    }

    private static String getCampusidPutCampusString(String campus) {
        String data;
        if (campus.equals("42Seoul") || campus.equals("42seoul")
                || campus.equals("Seoul") || campus.equals("seoul"))
            data = "29";
        else if (campus.equals("42Gyeongsan") || campus.equals("42gyeongsan")
                || campus.equals("Gyeongsan") || campus.equals("gyeongsan"))
            data ="69";
        else
            data = "0";
        return data;
    }

    public List<String> getCoalitionUsersDataPutCampus(String campus) throws IOException, InterruptedException {
        // 건 곤 감 리 //
        String data = null;
        data = getCoalitionsPutCampusString(campus);
        if (data == null) return (null);
        userIdList = Arrays.asList(data.split(", "));
        String requsturi = "/v2/coalitions/";
        List<String> userList = new ArrayList<>();
        for (String idx : userIdList) {
            int pagenum = 1;
            while (true) {
                String userData = getJsonData(this.AccesToken, requsturi + idx + "/coalitions_users?page=" + pagenum);
                List<String> logins = extractValuesToList(userData, "user_id");
                Thread.sleep(1000);
                pagenum++;
                if (userData.isEmpty() || userData.equals("[]") || logins.isEmpty()) {
                    break;
                }
                userList.addAll(logins);
            }
        }
        return userList;
    }

    private static String getCoalitionsPutCampusString(String campus) {
        String data;
        if (campus.equals("42Seoul") || campus.equals("42seoul")
                || campus.equals("Seoul") || campus.equals("seoul"))
            data ="85 , 86 , 87 , 88";
        else if (campus.equals("42Gyeongsan") || campus.equals("42gyeongsan")
                || campus.equals("Gyeongsan") || campus.equals("gyeongsan"))
            data ="12321321";
        else
            return null;
        return data;
    }

    // Token, RequestURI(endpoint) (Json)userData Get
    public String getJsonData(String accessToken, String requsturi) {
        String myCampus = oauth2Service.getUri(accessToken, requsturi);
        return myCampus;
    }

    // Json Data + key -> key 에 대한 Value들이 List형태로 나온다.
    public List<String> extractValuesToList(String json, String key) throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        JsonNode root = mapper.readTree(json);

        List<String> values = new ArrayList<>();
        root.forEach(node -> {
            if (node.has(key)) {
                values.add(node.get(key).asText());
            }
        });

        return values;
    }


//    public String extractValueFromJson(String json, String key) throws IOException {
//        ObjectMapper mapper = new ObjectMapper();
//        JsonNode root = mapper.readTree(json);
//
//        if (root.has(key)) {
//            return root.get(key).asText();
//        } else {
//            return null;
//        }
//    }

}
